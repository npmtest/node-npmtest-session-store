{"/home/travis/build/npmtest/node-npmtest-session-store/test.js":"/* istanbul instrument in package npmtest_session_store */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-session-store/lib.npmtest_session_store.js":"/* istanbul instrument in package npmtest_session_store */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_session_store = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_session_store = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-session-store/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-session-store && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_session_store */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_session_store\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_session_store.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_session_store.rollup.js'] =\n            local.assetsDict['/assets.npmtest_session_store.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_session_store.__dirname + '/lib.npmtest_session_store.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-session-store/node_modules/session-store/index.js":"module.exports = {\n\tManager: require('./lib/manager'),\n\tStore: require('./lib/store'),\n\tSession: require('./lib/session'),\n\tRedisStore: require('./lib/redisStore'),\n\tMiddleware: require('./lib/express')\n};","/home/travis/build/npmtest/node-npmtest-session-store/node_modules/session-store/lib/manager.js":"var _ = require('lodash');\nvar q = require('q');\nvar Session = require('./session');\nvar uuid = require('uuid');\n\nfunction Manager(store){\n\tthis.store = store;\n};\n\nManager.prototype.createSession = function(id){\n\tif(!id){\n\t\tid = uuid.v1();\n\t}\n\n\treturn new Session(this.store, id);\n};\n\nmodule.exports = Manager;","/home/travis/build/npmtest/node-npmtest-session-store/node_modules/session-store/lib/session.js":"var _ = require('lodash');\nvar q = require('q');\n\nfunction Session(store, id){\n\tvar self = this;\n\n\tself.store = store;\n\tself.id = id;\n\n\tself._dirty = false;\n\tself.attributes = {};\n\n\treturn self.store.get(id)\n\t.then(function(data){\n\t\tdata = data || {};\n\t\tself.attributes = data;\n\t\treturn self;\n\t});\n};\n\n/*\n\tFlush session to disk\n*/\nSession.prototype.flush = function(force){\n\tvar self = this;\n\n\tif(self._dirty || force){\n\t\treturn self.store.save(self.id, self.attributes)\n\t\t.then(function(){\n\t\t\tself._dirty = false;\n\t\t});\n\t} else {\n\t\tself._dirty = false;\n\t\treturn q.resolve();\n\t}\n};\n/*\n\tdata [, flush]\n\t{ key: val }, true\n\tOR\n\tkey, value [, flush]\n\t'key', 'val', true\n*/\nSession.prototype.set = function(){\n\tvar self = this;\n\tself._dirty = true;\n\n\tvar forceFlush = false;\n\tif(_.isObject(arguments[0])){\n\t\tself.attributes = _.extend(self.attributes, arguments[0]);\n\t\tforceFlush = !!arguments[1];\n\t} else {\n\t\tself.attributes[arguments[0]] = arguments[1];\n\t\tforceFlush = !!arguments[2];\n\t}\n\n\tif(forceFlush){\n\t\treturn self.flush();\n\t}\n\treturn q.resolve();\n};\n\nSession.prototype.get = function(key){\n\treturn this.attributes[key];\n};\n\nSession.prototype.destroy = function(){\n\tthis.attributes = {};\n\tthis._dirty = true;\n\treturn this.store.destroy(this.id);\n};\n\nSession.prototype.toJSON = function(){\n\treturn this.attributes;\n};\n\nmodule.exports = Session;","/home/travis/build/npmtest/node-npmtest-session-store/node_modules/session-store/lib/store.js":"var _ = require('lodash');\nvar q = require('q');\n\nfunction Store(){\n\n};\n\n// get data from the store\nStore.prototype.get = function(id){\n\treturn q.resolve();\n};\n\n// save data to the store\nStore.prototype.save = function(id, data){\n\treturn q.resolve();\n};\n\nmodule.exports = Store;\n\n","/home/travis/build/npmtest/node-npmtest-session-store/node_modules/session-store/lib/redisStore.js":"var _ = require('lodash');\nvar q = require('q');\n\nvar Store = require('./store');\nvar redis = require('./modules/redis');\n\nfunction RedisStore(options){\n\tthis.redis = new redis(options);\n};\n\nRedisStore.prototype = Object.create(Store.prototype);\n\nRedisStore.prototype._get = function(id){\n\tvar self = this;\n\n\treturn self.redis.ready\n\t.then(function(){\n\t\treturn self.redis.get(id)\n\t\t.then(function(data){\n\t\t\tvar json = {};\n\n\t\t\ttry {\n\t\t\t\tjson = JSON.parse(data);\n\t\t\t} catch(e){}\n\n\t\t\treturn json || {};\n\t\t});\n\t});\n};\n\nRedisStore.prototype.get = function(id){\n\tvar self = this;\n\treturn self._get(id);\n};\n\nRedisStore.prototype.save = function(id, data){\n\tvar self = this;\n\n\treturn self.redis.ready\n\t.then(function(){\n\t\treturn self.redis.set(id, JSON.stringify(data));\n\t});\n};\n\nRedisStore.prototype.destroy = function(id){\n\tvar self = this;\n\n\treturn self.redis.ready\n\t.then(function(){\n\t\treturn self.redis.del(id);\n\t});\n};\n\nmodule.exports = RedisStore;","/home/travis/build/npmtest/node-npmtest-session-store/node_modules/session-store/lib/modules/redis.js":"var _ = require('lodash');\nvar q = require('q');\nvar redis = require('redis');\nvar main = require.main.exports;\nvar config = main.config;\n\nvar cacheWrap = function(options){\n\tvar deferred = q.defer();\n\n\toptions = _.defaults(options || {}, {\n\t\thost: '127.0.0.1',\n\t\tport: 6379\n\t});\n\n\tvar cache = redis.createClient(options.port, options.host);\n\n\tcache.on('error', function(err){ \n\t\tconsole.log('error connecting', err);\n\t});\n\n\tcache.on('connect', function(){ });\n\n\tcache.on('ready', function(){\n\t\tdeferred.resolve();\n\t});\n\n\tvar commandList = ['setex', 'get', 'set', 'keys', 'del'];\n\n\tvar commands = {};\n\n\t_.each(commandList, function(cmd){\n\t\tcommands[cmd] = function(){\n\t\t\tvar args = Array.prototype.slice.call((arguments || []));\n\n\t\t\treturn deferred.promise.then(function(){\n\t\t\t\tvar defer = q.defer();\n\t\t\t\tvar cb = function(err, res){\n\t\t\t\t\tif(err){\n\t\t\t\t\t\treturn defer.reject(err);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn defer.resolve(res);\n\t\t\t\t};\n\n\t\t\t\targs.push(cb);\n\t\t\t\tcache[cmd].apply(cache, args);\n\n\t\t\t\treturn defer.promise;\n\t\t\t});\n\t\t};\n\t});\n\n\treturn _.extend({\n\t\tready: deferred.promise\n\t}, commands);\n};\n\nmodule.exports = cacheWrap;","/home/travis/build/npmtest/node-npmtest-session-store/node_modules/session-store/lib/express.js":"var _ = require('lodash');\nvar q = require('q');\nvar md5 = require('MD5');\nvar uuid = require('uuid');\nvar Manager = require('./manager');\nvar Store = require('./store');\n\nvar generateInternalSessionId = function(key, sessionId){\n\treturn md5([key, sessionId].join(''));\n};\n\nvar middleware = function(options){\n\toptions = options || {};\n\toptions = _.defaults(options, {\n\t\talwaysFlush: true,\n\t\twaitForFlush: true,\n\t\tcookieKey: 'session-store',\n\t\tsalt: 'session-salt',\n\t\tcookie: _.defaults(options.cookie || {}, {\n\t\t\tpath: '/',\n\t\t\texpires: new Date(Date.now() + 60 * 60 * 24 * 1000),\n\t\t\thttpOnly: true,\n\t\t\tsecure: false\n\t\t}),\n\t\tsessionManager: new Manager(new Store())\n\t});\n\n\treturn function(req, res, next){\n\t\tvar oldEnd = res.end;\n\t\tvar cookie = req.cookies[options.cookieKey];\n\t\tif(!cookie){\n\t\t\tcookie = uuid.v1();\n\t\t\tres.cookie(options.cookieKey, cookie, options.cookie);\n\t\t}\n\t\tvar sessionId = cookie;\n\t\tvar internalSessionId = generateInternalSessionId(options.salt, sessionId);\n\n\t\toptions.sessionManager.createSession(internalSessionId)\n\t\t.then(function(session){\n\n\t\t\treq.session = session;\n\n\t\t\tres.end = function(){\n\t\t\t\tvar args = _.values(arguments);\n\n\t\t\t\tif(req.session._dirty || options.alwaysFlush){\n\t\t\t\t\tif(options.waitForFlush){\n\t\t\t\t\t\treturn req.session.flush()\n\t\t\t\t\t\t.then(function(){\n\t\t\t\t\t\t\toldEnd.apply(res, args);\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\treq.session.flush();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\toldEnd.apply(res, args);\n\t\t\t};\n\n\t\t\tnext();\n\t\t});\n\t};\n};\n\nmodule.exports = middleware;"}